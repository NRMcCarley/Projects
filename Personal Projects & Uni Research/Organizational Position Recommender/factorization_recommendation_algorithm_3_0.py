# -*- coding: utf-8 -*-
"""Factorization Recommendation Algorithm 3.0

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/177eUZtFsb90dR1M_4kz_nkZj8JYsb88T
"""

import numpy as np
from numpy import random
import matplotlib.pyplot as plt
import matplotlib.colors as colors

"""**Baseline Info**

R represents users on the rows and interests in the columns
"""

R = np.array([[1, 0, 0, 0, 0, 0], # Jonathan
              [1, 1, 0, 0, 0, 0], # Jerry
              [1, 0, 0, 0, 0, 0], # Briant
              [1, 0, 0, 0, 0, 0], # Nico
              [1, 0, 0, 0, 1, 1], # Ethan M
              [1, 1, 0, 0, 0, 0], # Graham
              [0, 1, 0, 0, 0, 0], # Cade
              [0, 0, 1, 0, 0, 0], # Daniel
              [0, 1, 0, 0, 0, 1], # Ryan1
              [0, 1, 1, 0, 0, 1], # Max
              [0, 0, 1, 0, 0,-1], # Ishaan
              [0, 0, 0, 1, 0, 0], # Davis
              [0, 0, 0, 1, 1, 0], # Alex
              [-1,0, 0, 0, 0, 1], # Blake
              [0, 0, 0, 0, 1,-1], # Michael
              [0, 0, 0, 0, 1, 0], # Aneesh
              [1, 0, 1, 0, 1, 0], # Andrew
              [0, 1, 1, 0, 0, 0], # Gabe
              [1, 0, 1, 1, 1, 0], # Ryan2
              [1, 1, 0, 1, 1, 0], # Alex K
              [1, 1, 0, 0, 1, 0], # Robert D
              [0, 1, 1, 1, 0, 0], # Will
              [1, 1, 0, 1, 0, 1], # E Cohn
              [1, 1, 1, 1, 1, 0], # Marcello
              [1, 0, 1, 0, 1, 0], # JB
              [0, 0, 0, 0, 1, 0], # Jagwinder
              [0, 0, 1, 0, 1,-1]])# Shane
u, d = np.shape(R)
k = 6 # Features
alpha = 0.01 # Learning Rate
steps = 500

def sigmoid(x):
  return 1/(1+np.exp(-1*x))

def initParams(u, d, k):
  P = np.random.rand(u, k)
  Q = np.random.rand(k, d)
  E = np.zeros((u, d))
  return P, Q, E

def forwardProp(P, Q):
  Rhat = np.dot(P, Q)
  return Rhat

def erFn(Rhat, R):
  tempE = Rhat - R
  row = 0
  while row < u:
    col = 0
    while col < d:
      if R[row, col] == 0:
        tempE[row, col] = 0
        col += 1
      else:
        col += 1
    row += 1
  errSum = np.sum(tempE**2)
  return errSum, tempE

def backProp(P, Q, E):
  dP = -2 * np.dot(E, Q.T)
  dQ = -2 * np.dot(P.T, E)
  return dP, dQ

def updateParams(P, Q, dP, dQ, alpha):
  P += alpha * dP
  Q += alpha * dQ
  return P, Q

def optimize(P, Q, E, steps):
  h = 0
  while h < steps:
    Rhat = forwardProp(P, Q)
    err, E = erFn(Rhat, R)
    dP, dQ = backProp(P, Q, E)
    P, Q = updateParams(P, Q, dP, dQ, alpha)
    print(f"Error at step {h+1} = {err}")
    h += 1

"""**Optimizer**"""

P, Q, E = initParams(u, d, k)

optimize(P, Q, E, steps)
Rhat = np.dot(P, Q)
print(Rhat)

"""**Data**"""

fig, ax = plt.subplots()

ax.matshow(Rhat*-1, cmap=plt.cm.coolwarm)

# ax.set_yticks(np.arange(u))
# ax.grid()
# ax.pcolormesh(Rhat, shading='flat', vmin=Rhat.min(), vmax=Rhat.max())

fig, ay = plt.subplots()
ay.matshow(R*-1, cmap=plt.cm.coolwarm)