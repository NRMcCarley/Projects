# -*- coding: utf-8 -*-
"""Trade Idea.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZomAQrSr4SoF-Z8yJcwrYk0iwY51XKEc

**Install & Import**
"""

pip install yfinance

import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
import pandas as pd
import numpy.linalg
import math

import sys
numpy.set_printoptions(threshold=sys.maxsize)

"""**Test**"""

security = 'GC=F'
start = '2020-01-01'
end = '2023-02-27'
data = yf.download(security,start,end)
numDates, numCols = data.shape

xs = np.arange(numDates)
ys = np.zeros(numDates)
prices = data['Close']
i = 0
dates = prices.keys()
for date in dates:
  ys[i] = prices[date]
  i += 1

plt.plot(xs, ys)

# Plot the close price of AAPL
data['Adj Close'].plot()
plt.show()

"""**Get Prices**"""

securities = ['Gold', 'Silver', 'Cotton', 'Wheat', 'Corn', 'Gas', 'Oil', 'Copper']
tickers = ['GC=F', 'SI=F', 'CT=F', 'KE=F', 'ZC=F', 'NG=F', 'CL=F', 'HG=F']
numSec = np.shape(tickers)[0]
start = '2020-01-01'
end = '2023-02-27'

# histPrices = np.zeros((numSec, numDates))
d = {}
df = pd.DataFrame(data=d)

i = 0
for ticker in tickers:
  closingPrices = yf.download(ticker,start,end)['Close']
  dates = closingPrices.keys()
  df[ticker] = closingPrices

prices = df.to_numpy()
numDates = np.shape(prices)[0]

"""**Get Percent Returns**"""

returns = np.zeros((numDates-1, numSec))

i = 0
while i < numDates-1:
  j = 0
  while j < numSec:
    returns[i, j] = (prices[i+1, j] - prices[i, j])/prices[i, j]
    j += 1
  i += 1

"""**Filter NaN Values**"""

t, n = np.shape(returns)
numLegit = np.zeros(t)
i = 0
while i < t:
  rowProduct = 1
  j = 0
  while j < n:
    rowProduct *= returns[i, j]
    j += 1
  if math.isnan(rowProduct):
    i += 1
  else:
    numLegit[i] = 1
    i += 1

quantLegit = int(np.sum(numLegit))
returnData = np.zeros((quantLegit, n))
i = 0
numReturns = 0
while i < t:
  if numLegit[i] == 1:
    returnData[numReturns,:] = returns[i, :]
    numReturns += 1
    i += 1
  else:
    i += 1

"""**Get Betas**"""

def fitter(x, y):
  iters = 100
  alpha = 0.05
  # y = mx + b
  n = np.shape(x)[0]
  m = 1.0
  b = 1.0
  iter = 0
  while iter < iters:
    dm = 0.0
    db = 0.0
    i = 0
    while i < n:
      temp1 = (2 * ((m*x[i]) + b - y[i]))
      db += temp1
      temp2 = (x[i] * db)
      dm += temp2
      i += 1
    m -= alpha * dm
    b -= alpha * db
    iter += 1
  return m, b

secBetas = np.zeros((numSec, numSec))
secAlphas = np.zeros((numSec, numSec))

a = 0
while a < numSec:
  b = 0
  while b < numSec:
    if a == b:
      secBetas[a, b] = 1
    else:
      x = returnData[:, a]
      y = returnData[:, b]
      A = np.vstack([x, np.ones(len(x))]).T
      beta, alpha = np.linalg.lstsq(A, y, rcond=None)[0]
      secBetas[a, b] = beta
      secAlphas[a, b] = alpha
    b += 1
  a += 1

plt.imshow(secBetas, cmap="PiYG", vmin=-2, vmax=2)
plt.colorbar()
print(secBetas)
print(secBetas[6,5])

print(secBetas[0])

sec1 = 1
sec2 = 0
x = returnData[:, sec1]
y = returnData[:, sec2]
A = np.vstack([x, np.ones(len(x))]).T
m, b = np.linalg.lstsq(A, y, rcond=None)[0]
yhat = (m*x) + b
plt.plot(x, y, '.', label='data')
plt.plot(x, yhat, label='fit')
plt.xlim(-.1,.1)
plt.ylim(-.1,.1)
plt.xlabel(securities[sec1])
plt.ylabel(securities[sec2])
plt.grid()
plt.legend()
bRatio = -1/m
print(f"Beta = {m}")
print(f"Buying Ratio = {bRatio}")
# print(f"{securities[sec2]} returns {m} times what {securities[sec1]} returns.")
if bRatio < 0:
  print(f"In order to hedge $1 of {securities[sec1]}, you need to sell ${-bRatio} of {securities[sec2]}")
else:
  print(f"In order to hedge $1 of {securities[sec1]}, you need to buy ${bRatio} of {securities[sec2]}")

"""If you buy wheat, your expected return is 0.26 times the expected return for gold.




"""

