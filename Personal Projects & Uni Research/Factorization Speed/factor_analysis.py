# -*- coding: utf-8 -*-
"""Factor Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SDfiTLEGPNcmLzsDbwnA1I-1VIN_BmjH
"""

import numpy as np
import matplotlib.pyplot as plt

A = np.array([[1, 0, 1, 1],
              [0, 1, 1, 0],
              [1, 1, 0, 1]])

"""**Parameters**"""

# Parameters
f = 3
iters = 1000
alpha = 0.01

"""**Functions**"""

def Error(A, P, Q):
  return (A - np.dot(P, Q))**2

def factorize(A):
  m, n = np.shape(A)
  P = np.random.rand(m,f)
  Q = np.random.rand(f,n)
  iter = 0
  while iter < iters:
    E = A - np.dot(P, Q)
    dP = -2 * np.dot(E, Q.T)
    dQ = -2 * np.dot(P.T, E)
    P += alpha * dP
    Q += alpha * dQ
    errs[iter] = (1/(m*n)) * np.sum(Error(A, P, Q))
    iter += 1
  return P, Q

"""**Test**"""

m, n = np.shape(A)
xs = np.arange(iters+1)
errs = np.zeros(iters+1)

P, Q = factorize(A)
plt.plot(xs,errs,'.')
plt.show()

print(np.dot(P, Q))

"""**Experiments**"""

def factorize(A):
  m, n = np.shape(A)
  f = int(np.round(n/10))
  P = np.random.rand(m,f)
  Q = np.random.rand(f,n)
  iter = 0
  while iter < iters:
    E = (np.dot(P,Q) - A)
    dP = -2 * np.dot(E, Q.T)
    dQ = -2 * np.dot(P.T, E)
    P += alpha * dP
    Q += alpha * dQ
    errors[iter] = (1/(n*m)) * (np.sum(Error(A, P, Q)))
    iter += 1
  return P, Q

sizes = np.array([5, 10, 50, 100, 500, 1000])
errors = np.zeros(iters+1)
xs = np.arange(iters+1)

numSizes = np.shape(sizes)[0]
sizeIndex = 0
while sizeIndex < 3:
  size = sizes[sizeIndex]
  A = np.random.rand(size, size)
  P, Q = factorize(A)
  plt.plot(xs,errors,'.',label=size)
  sizeIndex += 1

plt.legend()
plt.yscale('symlog')